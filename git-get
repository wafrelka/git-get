#!/usr/bin/env bash

set -ueo pipefail

error() {
    printf "%s\n" "$@" >&2
}

fatal() {
    error "$@"
    exit 1
}

if ! (ghq --version > /dev/null 2>&1); then
    fatal "ghq is not installed"
fi

ROOT_DIR="$(ghq root)"

if ! [ -d "$ROOT_DIR" ]; then
    fatal "\`ghq root\` does not return a valid root directory"
fi

usage() {
    cat >&2 <<EOS
usage: ${0##*/} [OPTIONS]... <source>
OPTIONS
    -h, --help:             show this message
EOS
}

src=""

while [ $# -ne 0 ]; do
    case "$1" in
        "-h" | "--help")
            usage && exit
            ;;
        "-"*)
            error "unknown option: $1" && usage && exit 1
            ;;
        *)
            src="$1"
            ;;
    esac
    shift
done

if [ -z "$src" ]; then
    usage && exit 1
fi

resolve_url() {
    temp_dir="$(mktemp -d)"
    git -C "$temp_dir" init . >/dev/null 2>&1
    git -C "$temp_dir" remote add origin "$1"
    git -C "$temp_dir" remote get-url origin
    rm -rf "$temp_dir"
}

parse_repo() {
    remote="$1"
    if ! [[ "$remote" = *"://"* ]]; then
        remote="${remote/":"/"/"}"
    fi
    repo="${remote/#*"://"/}"
    repo="${remote/%".git"/}"
    repo="${repo/#*"@"/}"
    printf "%s\n" "$repo"
}

parse_repo_short() {
    repo="$(parse_repo "$@")"
    repo="${repo/#"github.com/"/}"
    printf "%s\n" "$repo"
}

main() {
    remote="$(resolve_url "$src")"
    repo="$(parse_repo_short "$remote")"
    echo "repository: $repo"

    dest_dir="$ROOT_DIR/$repo"
    mkdir -p "$(dirname "$dest_dir")"

    if [ -d "$dest_dir/.git" ]; then
        echo "destination directory is not empty: $dest_dir" >&2
        exit 1
    fi

    git clone "$src" "$dest_dir"
}

main "$src"
